{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gauta\\\\Desktop\\\\whats-app-clone\\\\chat-app\\\\src\\\\components\\\\chat\\\\menu\\\\Conversations.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getUsers, setConversation } from '../../../service/api';\nimport { Box, Divider } from '@mui/material';\nimport { Conversation } from './Conversation';\nimport { useContext } from 'react';\nimport { AccountContext } from '../../../context/AccountProvider';\nimport styled from '@emotion/styled';\n// import { Socket } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Component = styled(Box)`\nheight: 81vh;\n\noverflow:overlay;\n`;\n_c = Component;\nconst StyledDivider = styled(Divider)`\nmargin: 0 0 0 70px;\nbackground-color: #e9edef;\nopacity:0.6;\n`;\n_c2 = StyledDivider;\nexport const Conversations = ({\n  text\n}) => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const {\n    account,\n    activeUsers,\n    setActiveUsers\n  } = useContext(AccountContext);\n  useEffect(() => {\n    const fetchData = async () => {\n      let res = await getUsers();\n      const filteredData = res.filter(user => user.name.toLowerCase().includes(text.toLowerCase()));\n      setUsers(filteredData);\n      // console.log(users);\n    };\n    const makeConversations = async () => {\n      users.filter(user => user.sub !== account.sub).map(async user => {\n        await setConversation({\n          senderId: account.sub,\n          receiverId: user.sub\n        });\n        console.log(\"made new conversations\");\n      });\n    };\n    fetchData();\n    makeConversations();\n  }, [text]);\n  useEffect(() => {\n    socket.current.emit('addUsers', account);\n    socket.current.on('getUsers', users => {\n      setActiveUsers(users);\n    });\n  }, [account]);\n  return /*#__PURE__*/_jsxDEV(Component, {\n    children: users.filter(user => user.sub !== account.sub).map(user => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Conversation, {\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(StyledDivider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Conversations, \"m4y7GxP+kZbLqZafFTKPmRmPPFs=\");\n_c3 = Conversations;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Component\");\n$RefreshReg$(_c2, \"StyledDivider\");\n$RefreshReg$(_c3, \"Conversations\");","map":{"version":3,"names":["React","useEffect","useState","getUsers","setConversation","Box","Divider","Conversation","useContext","AccountContext","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","Component","_c","StyledDivider","_c2","Conversations","text","_s","users","setUsers","account","activeUsers","setActiveUsers","fetchData","res","filteredData","filter","user","name","toLowerCase","includes","makeConversations","sub","map","senderId","receiverId","console","log","socket","current","emit","on","children","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["C:/Users/gauta/Desktop/whats-app-clone/chat-app/src/components/chat/menu/Conversations.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { getUsers, setConversation } from '../../../service/api'\r\nimport { Box, Divider } from '@mui/material';\r\nimport { Conversation } from './Conversation';\r\nimport { useContext } from 'react';\r\nimport { AccountContext } from '../../../context/AccountProvider';\r\nimport styled from '@emotion/styled';\r\n// import { Socket } from 'socket.io-client';\r\n\r\nconst Component = styled(Box)`\r\nheight: 81vh;\r\n\r\noverflow:overlay;\r\n`\r\n\r\nconst StyledDivider = styled(Divider)`\r\nmargin: 0 0 0 70px;\r\nbackground-color: #e9edef;\r\nopacity:0.6;\r\n`\r\n\r\nexport const Conversations = ({text}) => {\r\n\r\n    const [users,setUsers] = useState([]);\r\n    const {account,activeUsers,setActiveUsers} = useContext(AccountContext);\r\n\r\n    useEffect(()=> {\r\n\r\n        const fetchData = async () => {\r\n            let res = await getUsers(); \r\n            const filteredData = res.filter(user => user.name.toLowerCase().includes(text.toLowerCase()));\r\n            setUsers(filteredData);\r\n            // console.log(users);\r\n        }\r\n        \r\n        const makeConversations = async() => {\r\n            users.filter((user) => user.sub!==account.sub)\r\n            .map(async(user)=>{\r\n                await setConversation({senderId: account.sub, receiverId: user.sub })\r\n                console.log(\"made new conversations\")\r\n            })\r\n        }\r\n\r\n        fetchData();\r\n        makeConversations();\r\n    },[text]);\r\n\r\n\r\n\r\n    useEffect(()=> {\r\n        socket.current.emit('addUsers',account)\r\n        socket.current.on('getUsers', users => {\r\n            setActiveUsers(users);\r\n        })\r\n    },[account])\r\n\r\n  return (\r\n    <Component>\r\n        {\r\n            users.filter(user => user.sub!==account.sub).map(user=>(\r\n                <>\r\n                    <Conversation user={user} />\r\n                    <StyledDivider/>\r\n                </>\r\n            ))\r\n        }\r\n    </Component>\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}